--- a/DevelopmentSettings.java	2017-09-17 05:59:52.000000000 +0300
+++ b/DevelopmentSettings.java	2017-11-16 01:08:36.064707660 +0300
@@ -118,8 +118,6 @@
     private static final String BUGREPORT = "bugreport";
     private static final String BUGREPORT_IN_POWER_KEY = "bugreport_in_power";
     private static final String OPENGL_TRACES_PROPERTY = "debug.egl.trace";
-    private static final String UPDATE_RECOVERY_PROPERTY = "persist.sys.recovery_update";
-
     private static final String DEBUG_APP_KEY = "debug_app";
     private static final String WAIT_FOR_DEBUGGER_KEY = "wait_for_debugger";
     private static final String VERIFY_APPS_OVER_USB_KEY = "verify_apps_over_usb";
@@ -158,24 +156,16 @@
     private static final String SELECT_LOGD_SIZE_KEY = "select_logd_size";
     private static final String SELECT_LOGD_SIZE_PROPERTY = "persist.logd.size";
     private static final String SELECT_LOGD_DEFAULT_SIZE_PROPERTY = "ro.logd.size";
-    private static final String UPDATE_RECOVERY_KEY = "update_recovery";
-
     private static final String FORCE_HIGHEND_GFX_KEY = "pref_force_highend_gfx";
     private static final String FORCE_HIGHEND_GFX_PERSIST_PROP = "persist.sys.force_highendgfx";
-
     private static final String OPENGL_TRACES_KEY = "enable_opengl_traces";
-
     private static final String ROOT_ACCESS_KEY = "root_access";
     private static final String ROOT_ACCESS_PROPERTY = "persist.sys.root_access";
-
     private static final String IMMEDIATELY_DESTROY_ACTIVITIES_KEY
             = "immediately_destroy_activities";
     private static final String APP_PROCESS_LIMIT_KEY = "app_process_limit";
-
     private static final String SHOW_ALL_ANRS_KEY = "show_all_anrs";
-
     private static final String KILL_APP_LONGPRESS_BACK = "kill_app_longpress_back";
-
     private static final String KILL_APP_LONGPRESS_TIMEOUT = "kill_app_longpress_timeout";

     private static final String PROCESS_STATS = "proc_stats";
@@ -282,8 +272,6 @@

     private SwitchPreference mAdvancedReboot;

-    private SwitchPreference mUpdateRecovery;
-
     private SwitchPreference mForceHighEndGfx;

     private SwitchPreference mDevelopmentShortcut;
@@ -305,7 +293,6 @@
     private Dialog mAdbKeysDialog;
     private boolean mUnavailable;
     private Dialog mRootDialog;
-    private Dialog mUpdateRecoveryDialog;

     @Override
     public void onCreate(Bundle icicle) {
@@ -365,7 +352,6 @@
         mPassword = (PreferenceScreen) findPreference(LOCAL_BACKUP_PASSWORD);
         mAllPrefs.add(mPassword);
         mAdvancedReboot = findAndInitSwitchPref(ADVANCED_REBOOT_KEY);
-        mUpdateRecovery = findAndInitSwitchPref(UPDATE_RECOVERY_KEY);
         mDevelopmentShortcut = findAndInitSwitchPref(DEVELOPMENT_SHORTCUT_KEY);

         final PreferenceGroup debugDrawingCategory = (PreferenceGroup)
@@ -383,7 +369,6 @@
             disableForUser(mEnableTerminal);
             disableForUser(mPassword);
             disableForUser(mAdvancedReboot);
-            disableForUser(mUpdateRecovery);
             disableForUser(mDevelopmentShortcut);
             disableForUser(mQuickBoot);
         }
@@ -707,7 +692,6 @@
         updateRootAccessOptions();
         updateAdvancedRebootOptions();
         updateDevelopmentShortcutOptions();
-        updateUpdateRecoveryOptions();
         if (mForceHighEndGfx != null) {
             updateHighEndGfxOptions();
         }
@@ -783,7 +767,6 @@
         resetAdbNotifyOptions();
         resetVerifyAppsOverUsbOptions();
         resetDevelopmentShortcutOptions();
-        resetUpdateRecoveryOptions();
         writeAnimationScaleOption(0, mWindowAnimationScale, null);
         writeAnimationScaleOption(1, mTransitionAnimationScale, null);
         writeAnimationScaleOption(2, mAnimatorDurationScale, null);
@@ -1644,25 +1627,6 @@
                 .show();
     }

-    private void updateUpdateRecoveryOptions() {
-        updateSwitchPreference(mUpdateRecovery,
-                SystemProperties.getBoolean(UPDATE_RECOVERY_PROPERTY,
-                false));
-    }
-
-    private void writeUpdateRecoveryOptions() {
-        SystemProperties.set(UPDATE_RECOVERY_PROPERTY,
-                mUpdateRecovery.isChecked() ? "true" : "false");
-        pokeSystemProperties();
-    }
-
-    private void resetUpdateRecoveryOptions() {
-        // User builds should update recovery by default
-        if ("user".equals(Build.TYPE)) {
-            SystemProperties.set(UPDATE_RECOVERY_PROPERTY, "true");
-        }
-    }
-
     private void updateHighEndGfxOptions() {
         updateSwitchPreference(mForceHighEndGfx,
                 SystemProperties.getBoolean(FORCE_HIGHEND_GFX_PERSIST_PROP,
@@ -1878,28 +1842,6 @@
             writeDevelopmentShortcutOptions();
         } else if (preference == mKillAppLongpressBack) {
             writeKillAppLongpressBackOptions();
-        } else if (preference == mUpdateRecovery) {
-            if (mSwitchBar.isChecked()) {
-                if (mUpdateRecoveryDialog != null) {
-                    dismissDialogs();
-                }
-                if (mUpdateRecovery.isChecked()) {
-                    mUpdateRecoveryDialog = new AlertDialog.Builder(getActivity()).setMessage(
-                            getResources().getString(R.string.update_recovery_on_warning))
-                            .setTitle(R.string.update_recovery_title)
-                            .setPositiveButton(android.R.string.yes, this)
-                            .setNegativeButton(android.R.string.no, this)
-                            .show();
-                } else {
-                    mUpdateRecoveryDialog = new AlertDialog.Builder(getActivity()).setMessage(
-                            getResources().getString(R.string.update_recovery_off_warning))
-                            .setTitle(R.string.update_recovery_title)
-                            .setPositiveButton(android.R.string.yes, this)
-                            .setNegativeButton(android.R.string.no, this)
-                            .show();
-                }
-                mUpdateRecoveryDialog.setOnDismissListener(this);
-            }
         } else if (preference == mForceHighEndGfx) {
             writeHighEndGfxOptions();
         } else if (preference == mChamber) {
@@ -2022,10 +1964,6 @@
             mRootDialog.dismiss();
             mRootDialog = null;
         }
-        if (mUpdateRecoveryDialog != null) {
-            mUpdateRecoveryDialog.dismiss();
-            mUpdateRecoveryDialog = null;
-        }
     }

     public void onClick(DialogInterface dialog, int which) {
@@ -2075,10 +2013,6 @@
                 // Reset the option
                 writeRootAccessOptions("0");
             }
-        } else if (dialog == mUpdateRecoveryDialog) {
-            if (which == DialogInterface.BUTTON_POSITIVE) {
-                writeUpdateRecoveryOptions();
-            }
         }
     }

@@ -2097,9 +2031,6 @@
                 mSwitchBar.setChecked(false);
             }
             mEnableDialog = null;
-        } else if (dialog == mUpdateRecoveryDialog) {
-            updateUpdateRecoveryOptions();
-            mUpdateRecoveryDialog = null;
         } else if (dialog == mRootDialog) {
             updateRootAccessOptions();
             mRootDialog = null;
